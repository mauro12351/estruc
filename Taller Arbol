#include <iostream>
#include <cstdlib>
using namespace std;

struct Estudiante {
    string codigo;
    string nombres;
    string apellidos;
    string fechaNacimiento;
    Estudiante *izq;
    Estudiante *der;
    Estudiante *subArbolFecha;
    Estudiante *padre;
};

Estudiante *raiz = NULL, *aux, *aux2, *auxFecha;

void posicionar(){
    if(aux->codigo < aux2->codigo){
        if(aux2->izq != NULL){
            aux2 = aux2->izq;
            posicionar();
        }
        else {
            aux2->izq = aux;
            aux->padre = aux2;
        }
    }
    else if(aux->codigo > aux2->codigo) {
        if(aux2->der != NULL){
            aux2 = aux2->der;
            posicionar();
        }
        else {
            aux2->der = aux;
            aux->padre = aux2;
        }
    }
}

void posicionarFecha(){
    if(aux->fechaNacimiento < auxFecha->fechaNacimiento){
        if(auxFecha->izq != NULL){
            auxFecha = auxFecha->izq;
            posicionarFecha();
        }
        else {
            auxFecha->izq = aux;
            aux->padre = auxFecha;
        }
    }
    else if(aux->fechaNacimiento > auxFecha->fechaNacimiento) {
        if(auxFecha->der != NULL){
            auxFecha = auxFecha->der;
            posicionarFecha();
        }
        else {
            auxFecha->der = aux;
            aux->padre = auxFecha;
        }
    }
}

void registrar(){
    aux = new Estudiante;
    cout << "Codigo: ";
    cin >> aux->codigo;
    cout << "Nombres: ";
    cin >> aux->nombres;
    cout << "Apellidos: ";
    cin >> aux->apellidos;
    cout << "Fecha de Nacimiento: ";
    cin >> aux->fechaNacimiento;
    aux->izq = aux->der = aux->subArbolFecha = NULL;
    if(raiz == NULL){
        raiz = aux;
    }
    else {
        aux2 = raiz;
        posicionar();
    }
    if(raiz->subArbolFecha == NULL){
        raiz->subArbolFecha = aux;
    }
    else {
        auxFecha = raiz->subArbolFecha;
        posicionarFecha();
    }
}

void preorden(Estudiante *recursive){
    if(recursive != NULL){
        cout << "Codigo " << recursive->codigo << ", Nombres " << recursive->nombres << ", Apellidos " << recursive->apellidos << ", Fecha de Nacimiento " << recursive->fechaNacimiento << endl;
        preorden(recursive->izq);
        preorden(recursive->der);
    } else {
        cout << "El codigo del estudiante no existe en el sistema." << endl;
    }
}

void inorden(Estudiante *recursive){
    if(recursive != NULL){
        inorden(recursive->izq);
        cout << "Codigo " << recursive->codigo << ", Nombres " << recursive->nombres << ", Apellidos " << recursive->apellidos << ", Fecha de Nacimiento " << recursive->fechaNacimiento << endl;
        inorden(recursive->der);
    } else {
        cout << "El codigo del estudiante no existe en el sistema." << endl;
    }
}

void posorden(Estudiante *recursive){
    if(recursive != NULL){
        posorden(recursive->izq);
        posorden(recursive->der);
        cout << "Codigo " << recursive->codigo << ", Nombres " << recursive->nombres << ", Apellidos " << recursive->apellidos << ", Fecha de Nacimiento " << recursive->fechaNacimiento << endl;
    } else {
        cout << "El codigo del estudiante no existe en el sistema." << endl;
    }

}

Estudiante* encontrarMasIzquierdo(Estudiante* recursive){
    while(recursive && recursive->izq != NULL)
        recursive = recursive->izq;
    return recursive;
}

void reemplazar(Estudiante* a, Estudiante* b) {
    if(a->padre == NULL)
        raiz = b;
    else if(a == a->padre->izq)
        a->padre->izq = b;
    else
        a->padre->der = b;
    if(b != NULL)
        b->padre = a->padre;
}

void destruirNodo(Estudiante* recursive) {
    delete recursive;
}

void eliminar(string codigo){
    Estudiante* temp = raiz;
    Estudiante* nodoAEliminar = NULL;
    while(temp != NULL) {
        if(codigo < temp->codigo)
            temp = temp->izq;
        else if(codigo > temp->codigo)
            temp = temp->der;
        else {
            nodoAEliminar = temp;
            break;
        }
    }
    if(nodoAEliminar == NULL) {
        cout << "El estudiante con codigo " << codigo << " no se encuentra en el sistema." << endl;
        return;
    }
    if(nodoAEliminar->izq == NULL)
        reemplazar(nodoAEliminar, nodoAEliminar->der);
    else if(nodoAEliminar->der == NULL)
        reemplazar(nodoAEliminar, nodoAEliminar->izq);
    else {
        Estudiante* temp = encontrarMasIzquierdo(nodoAEliminar->der);
        if(temp->padre != nodoAEliminar) {
            reemplazar(temp, temp->der);
            temp->der = nodoAEliminar->der;
            temp->der->padre = temp;
        }
        reemplazar(nodoAEliminar, temp);
        temp->izq = nodoAEliminar->izq;
        temp->izq->padre = temp;
    }
    destruirNodo(nodoAEliminar);
    cout << "El estudiante con codigo " << codigo << " ha sido eliminado correctamente." << endl;

    temp = raiz->subArbolFecha;
    Estudiante* padreFecha = NULL;
    while(temp != NULL) {
        if(codigo < temp->codigo) {
            padreFecha = temp;
            temp = temp->izq;
        }
        else if(codigo > temp->codigo) {
            padreFecha = temp;
            temp = temp->der;
        }
        else {
            if(padreFecha == NULL)
                raiz->subArbolFecha = NULL;
            else if(temp == padreFecha->izq)
                padreFecha->izq = NULL;
            else
                padreFecha->der = NULL;
            destruirNodo(temp);
            break;
        }
    }
}

int main(){
    int opc = 0;
    do {
        cout << "1. Registrar Estudiante" << endl;
        cout << "2. Recorrer Arbol Preorden" << endl;
        cout << "3. Recorrer Arbol Inorden" << endl;
        cout << "4. Recorrer Arbol Posorden" << endl;
        cout << "5. Eliminar Estudiante" << endl;
        cout << "6. Salir" << endl;
        cin >> opc;
        switch(opc){
            case 1: registrar(); break;
            case 2: preorden(raiz); break;
            case 3: inorden(raiz); break;
            case 4: posorden(raiz); break;
            case 5: 
                string codigo;
                cout << "Ingrese el codigo del estudiante a eliminar: ";
                cin >> codigo;
                eliminar(codigo);
                break;
        }
    } while(opc != 6);
    return 0;
    
}
