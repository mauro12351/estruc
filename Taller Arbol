#include <iostream>
#include <cstdlib>
using namespace std;

struct Estudiante {
    string codigo;
    string nombres;
    string apellidos;
    string fechaNacimiento;
    Estudiante *izq;
    Estudiante *der;
    Estudiante *subArbolFecha;
    Estudiante *padre;
};

Estudiante *raiz = NULL, *aux, *aux2, *auxFecha;

void posicionar(){
    if(aux->codigo < aux2->codigo){
        if(aux2->izq != NULL){
            aux2 = aux2->izq;
            posicionar();
        }
        else {
            aux2->izq = aux;
            aux->padre = aux2;
        }
    }
    else if(aux->codigo > aux2->codigo) {
        if(aux2->der != NULL){
            aux2 = aux2->der;
            posicionar();
        }
        else {
            aux2->der = aux;
            aux->padre = aux2;
        }
    }
}

void posicionarFecha(){
    if(aux->fechaNacimiento < auxFecha->fechaNacimiento){
        if(auxFecha->izq != NULL){
            auxFecha = auxFecha->izq;
            posicionarFecha();
        }
        else {
            auxFecha->izq = aux;
            aux->padre = auxFecha;
        }
    }
    else if(aux->fechaNacimiento > auxFecha->fechaNacimiento) {
        if(auxFecha->der != NULL){
            auxFecha = auxFecha->der;
            posicionarFecha();
        }
        else {
            auxFecha->der = aux;
            aux->padre = auxFecha;
        }
    }
}
void registrar(){
    aux = new Estudiante;
    cout << "Codigo: ";
    cin >> aux->codigo;
    cout << "Nombres: ";
    cin >> aux->nombres;
    cout << "Apellidos: ";
    cin >> aux->apellidos;
    cout << "Fecha de Nacimiento: ";
    cin >> aux->fechaNacimiento;
    aux->izq = aux->der = aux->subArbolFecha = NULL;
    if(raiz == NULL){
        raiz = aux;
    }
    else {
        aux2 = raiz;
        posicionar();
    }
    if(raiz->subArbolFecha == NULL){
        raiz->subArbolFecha = aux;
    }
    else {
        auxFecha = raiz->subArbolFecha;
        posicionarFecha();
    }
}

void preorden(Estudiante *recursive){
    if(recursive != NULL){
        cout << "Codigo " << recursive->codigo << ", Nombres " << recursive->nombres << ", Apellidos " << recursive->apellidos << ", Fecha de Nacimiento " << recursive->fechaNacimiento << endl;
        preorden(recursive->izq);
        preorden(recursive->der);
    }
}

void inorden(Estudiante *recursive){
    if(recursive != NULL){
        inorden(recursive->izq);
        cout << "Codigo " << recursive->codigo << ", Nombres " << recursive->nombres << ", Apellidos " << recursive->apellidos << ", Fecha de Nacimiento " << recursive->fechaNacimiento << endl;
        inorden(recursive->der);
    }
}

void posorden(Estudiante *recursive){
    if(recursive != NULL){
        posorden(recursive->izq);
        posorden(recursive->der);
        cout << "Codigo " << recursive->codigo << ", Nombres " << recursive->nombres << ", Apellidos " << recursive->apellidos << ", Fecha de Nacimiento " << recursive->fechaNacimiento << endl;
    }
}

Estudiante* encontrarMasIzquierdo(Estudiante* recursive){
    while(recursive && recursive->izq != NULL)
        recursive = recursive->izq;
    return recursive;
}
