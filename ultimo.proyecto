//handryd murillo 
//arley camacho

#include <iostream>
#include <string>
#include <malloc.h>

using namespace std;

struct Pasajero {
    char nombre[30];
    Pasajero* sig;
};

struct Embarcacion {
    int matricula;
    char destino[40];
    int precio;
    char nombre[40];
    int dia;
    int mes;
    int anio;
    int capacidad;
    Embarcacion* izq;
    Embarcacion* der;
    Pasajero* cabeza;
    Pasajero* cola;
    int numPasajeros;
    int altura;
};

Embarcacion* raiz, *aux, *aux1;

int obtenerAltura(Embarcacion* n);
int mayor(int a, int b);
int obtenerBalance(Embarcacion* n);
Embarcacion* rotarDerecha(Embarcacion* y);
Embarcacion* rotarIzquierda(Embarcacion* x);
Embarcacion* insertar(Embarcacion* embarcacion);
Embarcacion* BuscarEmbarca(int matricula);
void BuscarEM();
void MostrarLE(Embarcacion* embarcacion);
void RegistrarEM();
void RegistrarPa();
void listarPa();
void preOrden(Embarcacion* nodo);

int obtenerAltura(Embarcacion* n) {
    return n == NULL ? 0 : n->altura;
}

int mayor(int a, int b) {
    return (a > b) ? a : b;
}

int obtenerBalance(Embarcacion* n) {
    if (n == NULL) {
        return 0;
    }
    return obtenerAltura(n->izq) - obtenerAltura(n->der);
}

Embarcacion* rotarDerecha(Embarcacion* y) {
    Embarcacion* x = y->izq;
    Embarcacion* T2 = x->der;

    x->der = y;
    y->izq = T2;

    y->altura = mayor(obtenerAltura(y->izq), obtenerAltura(y->der)) + 1;
    x->altura = mayor(obtenerAltura(x->izq), obtenerAltura(x->der)) + 1;

    return x;
}

Embarcacion* rotarIzquierda(Embarcacion* x) {
    Embarcacion* y = x->der;
    Embarcacion* T2 = y->izq;

    y->izq = x;
    x->der = T2;

    x->altura = mayor(obtenerAltura(x->izq), obtenerAltura(x->der)) + 1;
    y->altura = mayor(obtenerAltura(y->izq), obtenerAltura(y->der)) + 1;

    return y;
}

Embarcacion* insertar(Embarcacion* embarcacion) {
    if (embarcacion == NULL) {
        return aux;
    }

    if (aux->matricula < embarcacion->matricula) {
        embarcacion->izq = insertar(embarcacion->izq);
    } else if (aux->matricula > embarcacion->matricula) {
        embarcacion->der = insertar(embarcacion->der);
    } else {
        return embarcacion;
    }

    embarcacion->altura = 1 + mayor(obtenerAltura(embarcacion->izq), obtenerAltura(embarcacion->der));

    int balance = obtenerBalance(embarcacion);

    if (balance > 1 && aux->matricula < embarcacion->izq->matricula) {
        return rotarDerecha(embarcacion);
    }

    if (balance < -1 && aux->matricula > embarcacion->der->matricula) {
        return rotarIzquierda(embarcacion);
    }

    if (balance > 1 && aux->matricula > embarcacion->izq->matricula) {
        embarcacion->izq = rotarIzquierda(embarcacion->izq);
        return rotarDerecha(embarcacion);
    }

    if (balance < -1 && aux->matricula < embarcacion->der->matricula) {
        embarcacion->der = rotarDerecha(embarcacion->der);
        return rotarIzquierda(embarcacion);
    }

    return embarcacion;
}

Embarcacion* BuscarEmbarca(int matricula) {
    aux = raiz;
    while (aux != NULL && aux->matricula != matricula) {
        if (matricula < aux->matricula) {
            aux = aux->izq;
        } else {
            aux = aux->der;
        }
    }
    return aux;
}

void RegistrarEM() {
    aux = (Embarcacion*)malloc(sizeof(Embarcacion));
    cout << "Ingrese la matrícula de la embarcación: ";
    cin >> aux->matricula;
    cout << "Ingrese el nombre de la embarcación: ";
    cin.ignore();
    cin.getline(aux->nombre, 40);
    cout << "Ingrese el destino del viaje: ";
    cin.getline(aux->destino, 40);
    cout << "Ingrese el precio del viaje: ";
    cin >> aux->precio;
    cout << "Ingrese el día de salida: ";
    cin >> aux->dia;
    cout << "Ingrese el mes de salida: ";
    cin >> aux->mes;
    cout << "Ingrese el año de salida: ";
    cin >> aux->anio;
    cout << "Ingrese la capacidad de la embarcación: ";
    cin >> aux->capacidad;
    aux->izq = NULL;
    aux->der = NULL;
    aux->altura = 1;

    raiz = insertar(aux);
    cout << "Embarcación registrada con éxito." << endl;
}

void RegistrarPa() {
    int matricula;
    cout << "Ingrese la matrícula de la embarcación en la que desea registrarse: ";
    cin >> matricula;

    aux1 = BuscarEmbarca(matricula);

    if (aux1 != NULL) {
        if (aux1->numPasajeros < aux1->capacidad) {
            Pasajero* nuevo = (Pasajero*)malloc(sizeof(Pasajero));
            cout << "Ingrese el nombre del pasajero: ";
            cin.ignore();
            cin.getline(nuevo->nombre, 30);
            nuevo->sig = NULL;

            if (aux1->cabeza == NULL) {
                aux1->cabeza = nuevo;
                aux1->cola = nuevo;
            } else {
                aux1->cola->sig = nuevo;
                aux1->cola = nuevo;
            }

            aux1->numPasajeros++;
            cout << "Pasajero registrado con éxito en la embarcación." << endl;
        } else {
            cout << "La embarcación alcanzó su capacidad máxima de pasajeros." << endl;
        }
    } else {
        cout << "No se encontró ninguna embarcación con esa matrícula." << endl;
    }
}

void listarPa() {
    int matricula;
    cout << "Ingrese la matrícula de la embarcación para ver la lista de pasajeros: ";
    cin >> matricula;

    aux1 = BuscarEmbarca(matricula);

    if (aux1 != NULL) {
        cout << "Pasajeros registrados en la embarcación " << aux1->nombre << ":" << endl;
        Pasajero* temp = aux1->cabeza;
        while (temp != NULL) {
            cout << temp->nombre << endl;
            temp = temp->sig;
        }
    } else {
        cout << "No se encontró una embarcación con esa matrícula." << endl;
    }
}

void preOrden(Embarcacion* nodo) {
    if (nodo != NULL) {
        cout << nodo->matricula << " ";
        preOrden(nodo->izq);
        preOrden(nodo->der);
    }
}

Embarcacion* encontrarNodoEliminar(Embarcacion* nodo, int matricula) {
    if (nodo == NULL) {
        return NULL;
    }

    if (matricula < nodo->matricula) {
        return encontrarNodoEliminar(nodo->izq, matricula);
    } else if (matricula > nodo->matricula) {
        return encontrarNodoEliminar(nodo->der, matricula);
    } else {
        return nodo;
    }
}

Embarcacion* encontrarMasIzquierdo(Embarcacion* nodo) {
    while (nodo && nodo->izq != NULL) {
        nodo = nodo->izq;
    }
    return nodo;
}

Embarcacion* eliminarViaje(Embarcacion* nodo, int matricula) {
    if (nodo == NULL) {
        return nodo;
    }

    if (matricula < nodo->matricula) {
        nodo->izq = eliminarViaje(nodo->izq, matricula);
    } else if (matricula > nodo->matricula) {
        nodo->der = eliminarViaje(nodo->der, matricula);
    } else {
        if (nodo->izq == NULL) {
            Embarcacion* temp = nodo->der;
            free(nodo);
            return temp;
        } else if (nodo->der == NULL) {
            Embarcacion* temp = nodo->izq;
            free(nodo);
            return temp;
        }

        Embarcacion* temp = encontrarMasIzquierdo(nodo->der);
        nodo->matricula = temp->matricula;
        nodo->der = eliminarViaje(nodo->der, temp->matricula);
    }
    return nodo;
}

void eliminarViaje() {
    int matricula;
    cout << "Ingrese la matrícula del viaje a eliminar: ";
    cin >> matricula;

    aux = BuscarEmbarca(matricula);
    if (aux != NULL) {
        raiz = eliminarViaje(raiz, matricula);
        cout << "Viaje con matrícula " << matricula << " eliminado correctamente." << endl;
    } else {
        cout << "No se encontró ningún viaje con esa matrícula." << endl;
    }
}

int main() {
    raiz = NULL;
    int opcion = 0;
    do {
        cout << "\n-- Menú --" << endl;
        cout << "1. Registrar una embarcación" << endl;
        cout << "2. Registrar un pasajero en una embarcación" << endl;
        cout << "3. Listar pasajeros de una embarcación" << endl;
        cout << "4. Listar todas las embarcaciones (PreOrden)" << endl;
        cout << "5. Eliminar viaje" << endl;
        cout << "6. Salir" << endl;
        cout << "Opción: ";
        cin >> opcion;
        switch (opcion) {
            case 1:
                RegistrarEM();
                break;
            case 2:
                RegistrarPa();
                break;
            case 3:
                listarPa();
                break;
            case 4:
                cout << "Recorrido PreOrden del Árbol AVL:" << endl;
                preOrden(raiz);
                cout << endl;
                break;
            case 5:
                eliminarViaje();
                break;
            case 6:
                cout << "Saliendo..." << endl;
                break;
            default:
                cout << "Opción incorrecta. Inténtelo de nuevo." << endl;
                break;
        }
    } while (opcion != 6);

    return 0;
}
