#include <iostream> 
#include <string>
#include <cstdlib> // Incluir la biblioteca para usar malloc
using namespace std;

struct Estudiante {
    int codigo;
    string nombres;
    string apellidos;
    string fechaNacimiento; 
    Estudiante *izq;
    Estudiante *der;
    Estudiante *subArbolFecha;
    Estudiante *padre;
};

Estudiante *raizCodigoPreorden = NULL;
Estudiante *raizCodigoInorden = NULL;

Estudiante* encontrarMasJoven(Estudiante* estudiante) {
    while(estudiante && estudiante->izq != NULL)
        estudiante = estudiante->izq;
    return estudiante;
}

void reemplazar(Estudiante* a, Estudiante* b) {
    if(a->padre == NULL)
        raizCodigoPreorden = b;
    else if(a == a->padre->izq)
        a->padre->izq = b;
    else
        a->padre->der = b;
    if(b != NULL)
        b->padre = a->padre;
}

void destruirNodo(Estudiante* estudiante) {
    delete estudiante;
}

void eliminarEstudiante(Estudiante* estudianteAEliminar) {
    if(estudianteAEliminar->izq == NULL)
        reemplazar(estudianteAEliminar, estudianteAEliminar->der);
    else if(estudianteAEliminar->der == NULL)
        reemplazar(estudianteAEliminar, estudianteAEliminar->izq);
    else {
        Estudiante* temp = encontrarMasJoven(estudianteAEliminar->der);
        if(temp->padre != estudianteAEliminar) {
            reemplazar(temp, temp->der);
            temp->der = estudianteAEliminar->der;
            temp->der->padre = temp;
        }
        reemplazar(estudianteAEliminar, temp);
        temp->izq = estudianteAEliminar->izq;
        if(temp->izq != NULL) // Agregué esta línea para asegurarme de establecer el padre correctamente
            temp->izq->padre = temp;
    }
    destruirNodo(estudianteAEliminar);
}

void eliminar(int codigo) {
    Estudiante* temp = raizCodigoPreorden;
    Estudiante* estudianteAEliminar = nullptr;
    // Buscar al estudiante por su código
    while(temp != NULL) {
        if(codigo < temp->codigo)
            temp = temp->izq;
        else if(codigo > temp->codigo)
            temp = temp->der;
        else {
            estudianteAEliminar = temp;
            break;
        }
    }
    // Si no se encontró al estudiante, mostrar un mensaje y salir
    if(estudianteAEliminar == nullptr) {
        cout << "El estudiante con código " << codigo << " no se encuentra en el sistema." << endl;
        return;
    }
    // Eliminar al estudiante
    eliminarEstudiante(estudianteAEliminar);
    cout << "El estudiante con código " << codigo << " ha sido eliminado correctamente." << endl;
}

void insertarPorCodigo(Estudiante *&raiz, Estudiante *nuevo) {
    if (raiz == NULL) {
        raiz = nuevo;
    } else {
        if (nuevo->codigo < raiz->codigo) {
            insertarPorCodigo(raiz->izq, nuevo);
            raiz->izq->padre = raiz;
        } else {
            insertarPorCodigo(raiz->der, nuevo);
            raiz->der->padre = raiz;
        }
    }
}

void insertarPorFecha(Estudiante *&raiz, Estudiante *nuevo) {
    if (raiz == NULL) {
        raiz = nuevo;
    } else {
        if (nuevo->fechaNacimiento < raiz->fechaNacimiento) {
            insertarPorFecha(raiz->izq, nuevo);
        } else {
            insertarPorFecha(raiz->der, nuevo);
        }
    }
}

void registrar() {
    Estudiante *nuevo = new Estudiante;
    cout << "---------------------------------" << endl;
    cout << "Código: ";
    cin >> nuevo->codigo;
    cout << "---------------------------------" << endl;
    cout << "Nombres: ";
    cin >> nuevo->nombres;
    cout << "---------------------------------" << endl;
    cout << "Apellidos: ";
    cin >> nuevo->apellidos;
    cout << "---------------------------------" << endl;
    cout << "Fecha de Nacimiento (YYYYMMDD): ";
    cin >> nuevo->fechaNacimiento;
    cout << "---------------------------------" << endl;
    nuevo->izq = NULL;
    nuevo->der = NULL;
    nuevo->padre = NULL;
    nuevo->subArbolFecha = NULL;

    insertarPorCodigo(raizCodigoPreorden, nuevo);
    insertarPorCodigo(raizCodigoInorden, nuevo);
    insertarPorFecha(nuevo->subArbolFecha, nuevo);
}

void preorden(Estudiante *recursive) {
    if(recursive != NULL) {
        cout << "Código: " << recursive->codigo << endl;
        cout << "Nombres: " << recursive->nombres << endl;
        cout << "Apellidos: " << recursive->apellidos << endl;
        cout << "Fecha de Nacimiento: " << recursive->fechaNacimiento << endl;
        preorden(recursive->izq);
        preorden(recursive->der);
    }
}

void inorden(Estudiante *recursive) {
    if(recursive != NULL) {
        inorden(recursive->izq);
        cout << "Código: " << recursive->codigo << endl;
        cout << "Nombres: " << recursive->nombres << endl;
        cout << "Apellidos: " << recursive->apellidos << endl;
        cout << "Fecha de Nacimiento: " << recursive->fechaNacimiento << endl;
        inorden(recursive->der);
    }
}

void postorden(Estudiante *recursive) {
    if(recursive != NULL) {
        postorden(recursive->izq);
        postorden(recursive->der);
        cout << "Código: " << recursive->codigo << endl;
        cout << "Nombres: " << recursive->nombres << endl;
        cout << "Apellidos: " << recursive->apellidos << endl;
        cout << "Fecha de Nacimiento: " << recursive->fechaNacimiento << endl;
    }
}

void recorrerPorCodigoPreorden(Estudiante *raiz) {
    cout << "---------------------------------" << endl;
    cout << "Estudiantes en Preorden (Árbol de Código):" << endl;
    preorden(raiz);
    cout << "---------------------------------" << endl;
}

void recorrerPorCodigoInorden(Estudiante *raiz) {
    cout << "---------------------------------" << endl;
    cout << "Estudiantes en Inorden (Árbol de Código):" << endl;
    inorden(raiz);
    cout << "---------------------------------" << endl;
}

void recorrerPorCodigoPostorden(Estudiante *raiz) {
    cout << "---------------------------------" << endl;
    cout << "Estudiantes en Postorden (Árbol de Código):" << endl;
    postorden(raiz);
    cout << "---------------------------------" << endl;
}

void recorrerPorFechaPreorden(Estudiante *subArbolFecha) {
    cout << "---------------------------------" << endl;
    cout << "Estudiantes en Preorden (Subárbol de Fecha de Nacimiento):" << endl;
    preorden(subArbolFecha);
    cout << "---------------------------------" << endl;
}

void recorrerPorFechaInorden(Estudiante *subArbolFecha) {
    cout << "---------------------------------" << endl;
    cout << "Estudiantes en Inorden (Subárbol de Fecha de Nacimiento):" << endl;
    inorden(subArbolFecha);
    cout << "---------------------------------" << endl;
}

void recorrerPorFechaPostorden(Estudiante *subArbolFecha) {
    cout << "---------------------------------" << endl;
    cout << "Estudiantes en Postorden (Subárbol de Fecha de Nacimiento):" << endl;
    postorden(subArbolFecha);
    cout << "---------------------------------" << endl;
}

int main() {
    int opc = 0;
    do {
        cout << "\nMenu:" << endl;
        cout << "1. Registrar Estudiante" << endl;
        cout << "2. Recorrer Estudiantes por Código en Preorden" << endl;
        cout << "3. Recorrer Estudiantes por Código en Inorden" << endl;
        cout << "4. Recorrer Estudiantes por Código en Postorden" << endl;
        cout << "5. Recorrer Estudiantes por Fecha de Nacimiento en Preorden" << endl;
        cout << "6. Recorrer Estudiantes por Fecha de Nacimiento en Inorden" << endl;
        cout << "7. Recorrer Estudiantes por Fecha de Nacimiento en Postorden" << endl;
        cout << "8. Eliminar Estudiante" << endl;
        cout << "9. Salir" << endl;
        cout << "Ingrese su opción: ";
        cin >> opc;

        switch(opc) {
            case 1: 
                registrar();
                break;
            case 2: 
                recorrerPorCodigoPreorden(raizCodigoPreorden);
                break;
            case 3: 
                recorrerPorCodigoInorden(raizCodigoInorden);
                break;
            case 4: 
                recorrerPorCodigoPostorden(raizCodigoPreorden);
                break;
            case 5: 
                recorrerPorFechaPreorden(raizCodigoPreorden->subArbolFecha);
                break;
            case 6: 
                recorrerPorFechaInorden(raizCodigoInorden->subArbolFecha);
                break;
            case 7: 
                recorrerPorFechaPostorden(raizCodigoPreorden->subArbolFecha);
                break;
            case 8: {
                int codigo;
                cout << "Ingrese el código del estudiante a eliminar: ";
                cin >> codigo;
                eliminar(codigo);
                break;
            }
            case 9:
                cout << "Saliendo del programa..." << endl;
                break;
            default:
                cout << "Opción no válida. Intente de nuevo." << endl;
        }
    } while (opc != 9);

    return 0;
}
