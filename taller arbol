#include <iostream>
#include <string>
#include <cstdlib> // Incluir la biblioteca para usar malloc
using namespace std;

struct Estudiante {
    int codigo;
    string nombres;
    string apellidos;
    string fechaNacimiento; 
    Estudiante *izq;
    Estudiante *der;
    Estudiante *subArbolFecha;
    Estudiante *padre;
};

Estudiante *raizCodigo = nullptr; // Es para encontrar al estudiante + joven

Estudiante* encontrarMasJoven(Estudiante* estudiante) {
    while(estudiante && estudiante->izq != nullptr)
        estudiante = estudiante->izq;
    return estudiante;
}

void reemplazar(Estudiante* a, Estudiante* b) { 
    if(a->padre == nullptr)
        raizCodigo = b;
    else if(a == a->padre->izq)
        a->padre->izq = b;
    else
        a->padre->der = b;
    if(b != nullptr)
        b->padre = a->padre;
}

void destruirNodo(Estudiante* estudiante) { // Para eliminar un estudiante
    delete estudiante;
}

void eliminarEstudiante(Estudiante* estudianteAEliminar) {
    if(estudianteAEliminar->izq == nullptr)
        reemplazar(estudianteAEliminar, estudianteAEliminar->der);
    else if(estudianteAEliminar->der == nullptr)
        reemplazar(estudianteAEliminar, estudianteAEliminar->izq);
    else {
        Estudiante* temp = encontrarMasJoven(estudianteAEliminar->der);
        if(temp->padre != estudianteAEliminar) {
            reemplazar(temp, temp->der);
            temp->der = estudianteAEliminar->der;
            temp->der->padre = temp;
        }
        reemplazar(estudianteAEliminar, temp);
        temp->izq = estudianteAEliminar->izq;
        temp->izq->padre = temp;
    }
    destruirNodo(estudianteAEliminar);
}

void eliminar(int codigo) {
    Estudiante* temp = raizCodigo;
    while(temp != nullptr) {
        if(codigo < temp->codigo)
            temp = temp->izq;
        else if(codigo > temp->codigo)
            temp = temp->der;
        else {
            eliminarEstudiante(temp);
            return;
        }
    }
    cout << "El estudiante con código " << codigo << " no se encuentra en el sistema." << endl;
}

void insertarPorCodigo(Estudiante *&raiz, Estudiante *nuevo) { // Insertar al estudiante al arbol por su codigo
    if (raiz == nullptr) {
        raiz = nuevo;
    } else {
        if (nuevo->codigo < raiz->codigo) {
            insertarPorCodigo(raiz->izq, nuevo);
            raiz->izq->padre = raiz;
        } else {
            insertarPorCodigo(raiz->der, nuevo);
            raiz->der->padre = raiz;
        }
    }
}

void insertarPorFecha(Estudiante *&raiz, Estudiante *nuevo) {
    if (raiz == nullptr) {
        raiz = nuevo;
    } else {
        if (nuevo->fechaNacimiento < raiz->fechaNacimiento) {
            insertarPorFecha(raiz->izq, nuevo);
        } else {
            insertarPorFecha(raiz->der, nuevo);
        }
    }
}

void registrar() {
    Estudiante *nuevo = new Estudiante;
    cout << "Código: ";
    cin >> nuevo->codigo;
    cout << "Nombres: ";
    cin >> nuevo->nombres;
    cout << "Apellidos: ";
    cin >> nuevo->apellidos;
    cout << "Fecha de Nacimiento (YYYYMMDD): ";
    cin >> nuevo->fechaNacimiento;
    nuevo->izq = nullptr;
    nuevo->der = nullptr;
    nuevo->padre = nullptr;
    nuevo->subArbolFecha = nullptr;

    insertarPorCodigo(raizCodigo, nuevo);
    insertarPorFecha(nuevo->subArbolFecha, nuevo);
}
